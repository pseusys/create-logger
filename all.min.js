(()=>{var __webpack_modules__={611:()=>{eval("// Can use it while no third-party libraries are included\nfunction children(node) {\n  var nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  node.childNodes.forEach(function (value) {\n    nodes.push(value);\n    if (value.hasChildNodes()) children(value, nodes);\n  });\n  return nodes;\n}\n\nRange.prototype._setRangeInNode = function (node, pos) {\n  var position = pos !== undefined ? Math.min(pos, node.textContent.length) : node.textContent.length;\n\n  this._setRangeStartInNode(node, position);\n\n  this.collapse(true);\n};\n\nfunction setRangeAnythingInNode(range, node, pos, start) {\n  if (node.nodeType == Node.TEXT_NODE || !children(node).some(function (value) {\n    if (value.nodeType == Node.TEXT_NODE) {\n      if (value.textContent.length >= pos) {\n        if (start) range.setStart(value, pos);else range.setEnd(value, pos);\n        return true;\n      } else {\n        pos -= value.textContent.length;\n        return false;\n      }\n    } else return false;\n  })) {\n    if (start) range.setStart(node, pos);else range.setEnd(node, pos);\n  }\n}\n\nRange.prototype._setRangeStartInNode = function (node, pos) {\n  setRangeAnythingInNode(this, node, pos, true);\n};\n\nRange.prototype._setRangeEndInNode = function (node, pos) {\n  setRangeAnythingInNode(this, node, pos, false);\n};\n\nfunction nodesInChars(before, parent) {\n  var desc = children(parent);\n  var max_index = before === null ? desc.length : desc.findIndex(function (value) {\n    return value == before;\n  });\n  var node;\n  var node_offset = 0;\n  if (!!before) node = before;else if (desc.length > 0) {\n    node = desc[desc.length - 1];\n    node_offset = node.textContent.length;\n  } else node = parent;\n  return {\n    offset: desc.reduce(function (previous, value, index) {\n      if (index < max_index && value.nodeType == Node.TEXT_NODE) return previous + value.textContent.length;else return previous;\n    }, 0),\n    node: node,\n    node_offset: node_offset\n  };\n}\n\nfunction getRangeAnythingInNode(anchor, off, node) {\n  if (node.contains(anchor)) {\n    if (node == anchor) {\n      if (node.nodeType == Node.TEXT_NODE) return {\n        offset: off,\n        node: node,\n        node_offset: off\n      };else return nodesInChars(off == node.childNodes.length ? null : node.childNodes[off], node);\n    } else {\n      var info = getRangeAnythingInNode(anchor, off, anchor);\n\n      var _nodesInChars = nodesInChars(anchor, node),\n          offset = _nodesInChars.offset;\n\n      return {\n        offset: offset + info.offset,\n        node: info.node,\n        node_offset: info.node_offset\n      };\n    }\n  } else return null;\n}\n\nRange.prototype._getRangeStartInNode = function (node) {\n  return getRangeAnythingInNode(this.startContainer, this.startOffset, node);\n};\n\nRange.prototype._getRangeEndInNode = function (node) {\n  return getRangeAnythingInNode(this.endContainer, this.endOffset, node);\n};\n\nSelection.prototype._getFocusOffsetInNode = function (node) {\n  var range = this.getRangeAt(0);\n  if (this.focusNode == range.startContainer && this.focusOffset == range.startOffset) return range._getRangeStartInNode(node).start;else return range._getRangeEndInNode(node).end;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///611\n")},223:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXTERNAL MODULE: ./scripts/lib.ts\nvar lib = __webpack_require__(611);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles/formatting.less\nvar formatting = __webpack_require__(558);\n;// CONCATENATED MODULE: ./styles/formatting.less\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = injectStylesIntoStyleTag_default()(formatting/* default */.Z, options);\n\n\n\n/* harmony default export */ const styles_formatting = (formatting/* default.locals */.Z.locals || {});\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles/main.less\nvar main = __webpack_require__(6);\n;// CONCATENATED MODULE: ./styles/main.less\n\n            \n\nvar main_options = {};\n\nmain_options.insert = "head";\nmain_options.singleton = false;\n\nvar main_update = injectStylesIntoStyleTag_default()(main/* default */.Z, main_options);\n\n\n\n/* harmony default export */ const styles_main = (main/* default.locals */.Z.locals || {});\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles/tabs.less\nvar tabs = __webpack_require__(44);\n;// CONCATENATED MODULE: ./styles/tabs.less\n\n            \n\nvar tabs_options = {};\n\ntabs_options.insert = "head";\ntabs_options.singleton = false;\n\nvar tabs_update = injectStylesIntoStyleTag_default()(tabs/* default */.Z, tabs_options);\n\n\n\n/* harmony default export */ const styles_tabs = (tabs/* default.locals */.Z.locals || {});\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/less-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./styles/terminal.less\nvar terminal = __webpack_require__(432);\n;// CONCATENATED MODULE: ./styles/terminal.less\n\n            \n\nvar terminal_options = {};\n\nterminal_options.insert = "head";\nterminal_options.singleton = false;\n\nvar terminal_update = injectStylesIntoStyleTag_default()(terminal/* default */.Z, terminal_options);\n\n\n\n/* harmony default export */ const styles_terminal = (terminal/* default.locals */.Z.locals || {});\n;// CONCATENATED MODULE: ./scripts/imports.ts\n // STYLES:\n\n\n\n\n\n;// CONCATENATED MODULE: ./langs/typescript.ts\n\n\nfunction construct(str) {\n  var codes = str.map(function (current, index) {\n    return create_function_for_line(current, index);\n  });\n  var warning = "// Following functions work in Node.js environment only. For DOM analogues see \'JavaScript\'.";\n  return "".concat(warning, "\\n\\n").concat(codes.join("\\n\\n"));\n}\nvar WHITESPACE = "\\xA0";\nvar INTENT = "\\xA0\\xA0\\xA0\\xA0";\n\nfunction typescript_escape(str) {\n  var separate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var res = str.replace(/\\\\033/g, "\\\\u001b").replace(/["\']/g, \'"\');\n  if (separate) res = "\\"".concat(res, "\\"");\n  return res;\n}\n\nfunction type(type) {\n  switch (type) {\n    case TYPES.int:\n    case TYPES.float:\n      return \'number\';\n\n    case TYPES.char:\n    case TYPES.string:\n      return \'string\';\n\n    case TYPES.int_array:\n      return \'number[]\';\n\n    case TYPES.string_array:\n      return \'string[]\';\n  }\n} //TODO: extract escape sequences from code (maybe general func)\n\n\nfunction extract_escapes() {}\n\nfunction create_function_for_line(entries, iter) {\n  var declaration = entries.map(function (value) {\n    var currentVar = "";\n\n    if (!!value.var_name) {\n      var _value$var_type, _type;\n\n      var currentVarType = (_value$var_type = value.var_type) !== null && _value$var_type !== void 0 ? _value$var_type : \'any\';\n      currentVarType = (_type = type(currentVarType)) !== null && _type !== void 0 ? _type : currentVarType;\n      currentVar += value.var_name + \': \' + currentVarType;\n    }\n\n    return currentVar;\n  }).filter(function (value) {\n    return !!value;\n  });\n  var sample = [];\n  var code = [];\n  entries.forEach(function (value) {\n    var str = convert([value], true);\n\n    if (!!value.var_name) {\n      var divided = str.split(value.value);\n      code.push(typescript_escape(divided[0], true));\n      code.push(typescript_escape(value.var_name, false));\n      code.push(typescript_escape(divided[1], true));\n      sample.push("[".concat(value.var_name, "]"));\n    } else {\n      code.push(typescript_escape(str, true));\n      sample.push(value.value);\n    }\n  });\n  return "/**\\n".concat(WHITESPACE, "* Function writing \\"").concat(sample.join(""), "\\" to console.\\n").concat(WHITESPACE, "**/\\n") + "export function print".concat(iter, "thLine (").concat(declaration.join(", "), ") {\\n") + "".concat(INTENT, "console.log(").concat(code.join(" + "), ");\\n") + "}";\n}\n;// CONCATENATED MODULE: ./core/langs.ts\n\nvar TYPES = {\n  "int": "Integer",\n  "float": "Floating point number",\n  "char": "Character",\n  string: "String",\n  int_array: "Array of integers",\n  string_array: "Array of strings"\n};\nvar LANGUAGES = {\n  "TypeScript (Node.js)": construct,\n  "JavaScript (DOM)": construct\n};\nfunction langs_construct(language, str) {\n  return LANGUAGES[language](str);\n}\n;// CONCATENATED MODULE: ./core/babylon.ts\nvar TRANSLATIONS = {\n  english: "English 🇬🇧"\n};\nvar LITERALS = {};\n;// CONCATENATED MODULE: ./core/constants.ts\n\n\nvar SEPARATOR = \'-\';\nvar COLORS = {\n  black: "0",\n  red: "1",\n  green: "2",\n  yellow: "3",\n  blue: "4",\n  magenta: "5",\n  cyan: "6",\n  white: "7"\n};\nvar STYLES = {\n  bold: "1",\n  normal: "22",\n  dim: "2"\n};\nvar DEFAULTS = {\n  "for": "white",\n  back: "black",\n  sty: "normal"\n}; // These below are not exported to PUG or LESS as they are keys for specific classes:\n\nvar PREFIXES = {\n  "for": "3",\n  back: "4",\n  sty: "",\n  blink: "5",\n  cross: "9",\n  under: "4",\n  ita: "3"\n};\nvar VAR_NAMES = {\n  "var-name": "data-var-name",\n  "var-type": "data-var-type"\n};\nfunction getPrefix(cls) {\n  if (cls.includes(SEPARATOR)) return cls.split(SEPARATOR)[0];else return cls;\n}\nfunction getPostfix(cls) {\n  if (cls.includes(SEPARATOR)) return cls.split(SEPARATOR)[1];else return "";\n}\nfunction multiplePrefix(pref) {\n  return pref === \'for\' || pref === \'back\' || pref === \'sty\';\n}\n\nfunction generateClassCodes() {\n  var codes = {};\n\n  for (var prefix in PREFIXES) {\n    if (prefix === \'for\' || prefix === \'back\') for (var color in COLORS) {\n      codes[prefix + SEPARATOR + color] = PREFIXES[prefix] + COLORS[color];\n    } else if (prefix === \'sty\') for (var styles in STYLES) {\n      codes[prefix + SEPARATOR + styles] = PREFIXES[prefix] + STYLES[styles];\n    } else codes[prefix] = PREFIXES[prefix];\n  }\n\n  return codes;\n}\n\nvar CLASS_CODES = generateClassCodes();\n// For passing variables to LESS:\nvar LESS_VARS = {\n  colors: Object.keys(COLORS),\n  styles: Object.keys(STYLES)\n};\nObject.keys(DEFAULTS).forEach(function (value) {\n  LESS_VARS["def-" + value] = DEFAULTS[value];\n}); // For passing variables to PUG:\n\nvar PUG_VARS = {\n  colors: Object.keys(COLORS),\n  styles: Object.keys(STYLES),\n  languages: LANGUAGES,\n  types: TYPES,\n  literals: LITERALS,\n  translations: TRANSLATIONS\n};\n;// CONCATENATED MODULE: ./core/utils.ts\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction areArraysEqual(a, b) {\n  if (!a || !b) return false;\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\nfunction getSameElements(a, b) {\n  if (areArraysEqual(a, b)) return a;\n  return _toConsumableArray(a).filter(function (value) {\n    return b.includes(value);\n  });\n}\n;// CONCATENATED MODULE: ./core/converter.ts\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = converter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction converter_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return converter_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return converter_arrayLikeToArray(o, minLen); }\n\nfunction converter_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nvar ESCAPE_START = "\\\\033[";\nvar ESCAPE_SEPARATOR = ";";\nvar ESCAPE_END = "m";\nvar ESCAPE_TERMINATE = "0"; //TODO: Reverse for file reading.\n\nfunction classesToStyles(classes) {\n  var styles = [];\n\n  var _iterator = _createForOfIteratorHelper(classes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var cls = _step.value;\n      if (!Object.keys(CLASS_CODES).includes(cls)) continue;\n      if (DEFAULTS[getPrefix(cls)] == getPostfix(cls)) continue;\n      styles.push(CLASS_CODES[cls]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return styles;\n} // TODO: add option to use user var names\n\n\nfunction convert(str) {\n  var useVarNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var result = "";\n  var previousClasses = [];\n\n  var _iterator2 = _createForOfIteratorHelper(str),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var entry = _step2.value;\n      var styles = classesToStyles(entry.classes);\n      var interior = "";\n\n      if (!areArraysEqual(previousClasses, styles)) {\n        if (previousClasses.length > 0) interior += ESCAPE_START + ESCAPE_TERMINATE + ESCAPE_END;\n\n        if (styles.length > 0) {\n          interior += ESCAPE_START;\n          interior += styles.join(ESCAPE_SEPARATOR);\n          interior += ESCAPE_END;\n        }\n      }\n\n      interior += entry.value;\n      result += interior;\n      previousClasses = styles;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (previousClasses.length > 0) result += ESCAPE_START + ESCAPE_TERMINATE + ESCAPE_END;\n  return result;\n}\n;// CONCATENATED MODULE: ./scripts/cutter.ts\nfunction cutter_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = cutter_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction cutter_toConsumableArray(arr) { return cutter_arrayWithoutHoles(arr) || cutter_iterableToArray(arr) || cutter_unsupportedIterableToArray(arr) || cutter_nonIterableSpread(); }\n\nfunction cutter_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction cutter_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return cutter_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return cutter_arrayLikeToArray(o, minLen); }\n\nfunction cutter_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction cutter_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return cutter_arrayLikeToArray(arr); }\n\nfunction cutter_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n/**\n * Type representing range inside a line-content (range containing multiple span elements only). Params:\n * + first - first node of the range.\n * + last - last node of the range.\n * + first_offset - offset inside first node (first offset).\n * + last_offset - offset inside last node (last offset).\n */\n\n/**\n *\n */\nvar range_backup;\n\nfunction parse_range(range, backup) {\n  var parent = get_chosen_line_content();\n\n  var first = range._getRangeStartInNode(parent);\n\n  var last = range._getRangeEndInNode(parent);\n\n  if (backup) range_backup = {\n    start: first.offset,\n    end: last.offset\n  };\n  var first_node = find_span_for_place(first.node);\n  var first_offset = first.node_offset;\n  var last_node = find_span_for_place(last.node);\n  var last_offset = last.node_offset;\n  if (first_node == last_node) return {\n    first: first_node,\n    first_offset: first_offset,\n    last: last_node,\n    last_offset: last_offset\n  };\n\n  if (first_offset == first_node.textContent.length && first_node.nextElementSibling != null) {\n    first_node = first_node.nextElementSibling;\n    first_offset = 0;\n  }\n\n  if (first_node == last_node) return {\n    first: first_node,\n    first_offset: first_offset,\n    last: last_node,\n    last_offset: last_offset\n  };\n\n  if (last_offset == 0 && last_node.previousElementSibling != null) {\n    last_node = last_node.previousElementSibling;\n    last_offset = last_node.textContent.length;\n  }\n\n  return {\n    first: first_node,\n    first_offset: first_offset,\n    last: last_node,\n    last_offset: last_offset\n  };\n}\n\nfunction restore_range(range) {\n  range._setRangeStartInNode(get_chosen_line_content(), range_backup.start);\n\n  range._setRangeEndInNode(get_chosen_line_content(), range_backup.end);\n}\n\nfunction splitAt(elem, pos, postInsert) {\n  var _elem$classList;\n\n  (_elem$classList = elem.classList).remove.apply(_elem$classList, cutter_toConsumableArray(Object.keys(VAR_NAMES)));\n\n  var clone = elem.cloneNode(true);\n\n  if (!postInsert) {\n    clone.textContent = elem.textContent.slice(0, pos);\n    elem.before(clone);\n    elem.textContent = elem.textContent.slice(pos);\n  } else {\n    clone.textContent = elem.textContent.slice(pos);\n    elem.after(clone);\n    elem.textContent = elem.textContent.slice(0, pos);\n  }\n}\n\nfunction joinAround(selected) {\n  if (selected.length == 0) return;\n\n  var around = cutter_toConsumableArray(selected);\n\n  around.unshift(around[0].previousElementSibling);\n  around.push(around[around.length - 1].nextElementSibling);\n  around.forEach(function (value, index) {\n    var friend = around[index - 1];\n    if (!friend || !value) return;\n\n    if (areArraysEqual(cutter_toConsumableArray(value.classList), cutter_toConsumableArray(friend.classList))) {\n      var _value$classList;\n\n      value.textContent = friend.textContent + value.textContent;\n      friend.remove();\n\n      (_value$classList = value.classList).remove.apply(_value$classList, cutter_toConsumableArray(Object.keys(VAR_NAMES)));\n    }\n  });\n}\n\nfunction get_selected_nodes(first, last) {\n  if (first == last) return [first];\n  var selected = [];\n  var current = first;\n\n  while (current != last) {\n    selected.push(current);\n    current = current.nextElementSibling;\n  }\n\n  selected.push(last);\n  return selected;\n}\n\nfunction get_selected_nodes_in_range(range) {\n  var _parse_range = parse_range(range, false),\n      first = _parse_range.first,\n      last = _parse_range.last;\n\n  return get_selected_nodes(first, last);\n}\nfunction style(range, format) {\n  if (range instanceof HTMLDivElement) applyFormatting(range, format);else cut(range, format);\n}\n\nfunction cut(range, format) {\n  if (range.collapsed) return;\n\n  var cuttingStart = function cuttingStart(offset, start) {\n    return offset == 0 || offset == start.textContent.length;\n  };\n\n  var cuttingEnd = function cuttingEnd(offset, end) {\n    return offset == 0 || offset == end.textContent.length;\n  };\n\n  var _parse_range2 = parse_range(range, true),\n      first = _parse_range2.first,\n      last = _parse_range2.last,\n      first_offset = _parse_range2.first_offset,\n      last_offset = _parse_range2.last_offset;\n\n  if (first.isSameNode(last)) {\n    var finalOffset = last_offset - first_offset;\n    if (!cuttingStart(first_offset, first)) splitAt(first, first_offset, false);\n    if (!cuttingEnd(finalOffset, last)) splitAt(last, finalOffset, true);\n  } else {\n    if (!cuttingStart(first_offset, first)) splitAt(first, first_offset, false);\n    if (!cuttingEnd(last_offset, last)) splitAt(last, last_offset, true);\n  }\n\n  var selected = get_selected_nodes(first, last);\n\n  var _iterator = cutter_createForOfIteratorHelper(selected),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n      applyFormatting(child, format);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  joinAround(selected);\n  restore_range(range);\n}\n\nfunction applyFormatting(elem, format) {\n  if (format == null) elem.className = "";else {\n    if (multiplePrefix(format.type)) {\n      var new_name = format.type + SEPARATOR + format.value;\n\n      var same_class = cutter_toConsumableArray(elem.classList).find(function (value) {\n        return value.startsWith(format.type);\n      });\n\n      if (!!same_class) elem.classList.replace(same_class, new_name);else elem.classList.add(new_name);\n    } else elem.classList.toggle(format.type, format.value);\n  }\n}\n\nfunction getCommonClasses(range, single) {\n  if (!range == !single) return null;\n  var base;\n  if (!!single) base = [single];else base = get_selected_nodes_in_range(range);\n  var multiple = base.map(function (value) {\n    var classes = cutter_toConsumableArray(value.classList);\n\n    var _loop = function _loop(def) {\n      var target = classes.find(function (val) {\n        return getPrefix(val) == def;\n      });\n      if (!target) classes.push(def + SEPARATOR + DEFAULTS[def]);\n    };\n\n    for (var def in DEFAULTS) {\n      _loop(def);\n    }\n\n    return classes;\n  });\n  if (multiple.length == 0) return null;\n  return multiple.reduce(function (prev, value) {\n    return getSameElements(prev, value);\n  }, multiple[0]);\n}\nfunction getCollapse(range) {\n  var _parse_range3 = parse_range(range, false),\n      first = _parse_range3.first,\n      last = _parse_range3.last;\n\n  if (first == last) return first;else return null;\n}\n;// CONCATENATED MODULE: ./scripts/storer.ts\nvar allowed = Boolean(get(\'allowed\'));\nfunction check() {\n  if (!allowed) {\n    alert("For storing user preferences and presets this site uses cookies.");\n    allowed = true;\n    set(\'allowed\', true);\n  }\n}\nfunction get(key) {\n  return window.localStorage.getItem(key);\n}\nfunction set(key, value) {\n  check();\n  window.localStorage.setItem(key, String(value));\n}\n;// CONCATENATED MODULE: ./scripts/style_tab.ts\nfunction style_tab_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = style_tab_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction style_tab_toConsumableArray(arr) { return style_tab_arrayWithoutHoles(arr) || style_tab_iterableToArray(arr) || style_tab_unsupportedIterableToArray(arr) || style_tab_nonIterableSpread(); }\n\nfunction style_tab_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction style_tab_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return style_tab_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return style_tab_arrayLikeToArray(o, minLen); }\n\nfunction style_tab_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction style_tab_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return style_tab_arrayLikeToArray(arr); }\n\nfunction style_tab_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\nfunction globalHandler(event) {\n  var target = event.target;\n  var selection = window.getSelection();\n  if (selection.rangeCount == 0) return;\n  var r = selection.getRangeAt(0);\n  if (!range_in_place(r) && !!get_focus()) r = get_focus();\n\n  if (target.classList.contains(\'term-changer\') || target.classList.contains(\'preset-button\')) {\n    var _focusedPreset;\n\n    var range = (_focusedPreset = focusedPreset) !== null && _focusedPreset !== void 0 ? _focusedPreset : r;\n    if (target.classList.contains(\'term-changer\')) apply_style(range, target);else apply_styles(range, target);\n  } else if (target.classList.contains(\'preset-example\')) {\n    if (!!focusedPreset && target.id == focusedPreset.id) {\n      savePreset(focusedPreset);\n      focusedPreset = null;\n    } else focusedPreset = target; //TODO: add some css for focused preset.\n\n\n    switch_mode(focusedPreset == null ? TERMINAL_STATE.STYLE : TERMINAL_STATE.FILE);\n    reflect_selection(null, focusedPreset);\n  } else if (target.classList.contains(\'variable\')) {\n    var field = event.target;\n    if (field.id == \'var-name\') variables[1].disabled = field.value == "";\n    var collapse = getCollapse(r);\n    if (!!collapse) collapse.setAttribute(VAR_NAMES[field.id], field.value);\n  }\n}\n\ndocument.getElementById(\'style-content\').onclick = globalHandler; // Left section: styles controls.\n\nvar term_changers = style_tab_toConsumableArray(document.getElementsByClassName(\'term-changer\'));\n\nfunction reflect_selection(range, single) {\n  drop_term_changers();\n\n  if (!range != !single) {\n    var classes = getCommonClasses(range, single);\n    if (!!classes) set_term_changers(classes);\n  }\n}\n\nfunction apply_style(range, elem) {\n  var name = elem.getAttribute(\'name\');\n  if (elem.getAttribute(\'type\') == \'checkbox\') style(range, {\n    type: name,\n    value: elem.checked\n  });else style(range, {\n    type: name,\n    value: elem.value\n  });\n}\n\nfunction drop_term_changers() {\n  document.getElementById(\'style-content\').reset();\n}\nfunction set_term_changers(classes) {\n  var _iterator = style_tab_createForOfIteratorHelper(classes),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var cls = _step.value;\n      if (!Object.keys(CLASS_CODES).includes(cls)) return "continue";\n\n      var term_changer = style_tab_toConsumableArray(term_changers).filter(function (value) {\n        return value.getAttribute(\'name\') == getPrefix(cls);\n      });\n\n      if (term_changer.length == 1) {\n        if (term_changer[0].getAttribute(\'type\') == \'checkbox\') term_changer[0].checked = true;else term_changer[0].value = getPostfix(cls);\n      } else term_changer.find(function (value) {\n        return value.value == getPostfix(cls);\n      }).checked = true;\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _ret = _loop();\n\n      if (_ret === "continue") continue;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n} // Middle section: presets controls.\n\nvar focusedPreset = null;\n\nfunction apply_styles(range, elem) {\n  style(range, null);\n  var temp = document.getElementById(elem.getAttribute(\'name\'));\n\n  style_tab_toConsumableArray(temp.classList).forEach(function (value) {\n    var type = getPrefix(value);\n    if (multiplePrefix(type)) style(range, {\n      type: type,\n      value: getPostfix(value)\n    });else style(range, {\n      type: type,\n      value: true\n    });\n  });\n}\n\nfunction savePreset(preset) {\n  set(preset.id, preset.className);\n}\n\nfunction restorePresets() {\n  style_tab_toConsumableArray(document.getElementsByClassName(\'preset-example\')).forEach(function (value) {\n    var savedValue = get(value.id);\n    if (!!savedValue) value.className = savedValue;\n  });\n} // Right section: variable controls.\n\nvar variables = Object.keys(VAR_NAMES).map(function (value) {\n  var input = document.getElementById(value);\n  input.oninput = globalHandler;\n  return input;\n});\nfunction reflectVariable(range) {\n  var collapse = getCollapse(range);\n  dropVariables();\n\n  if (!!collapse) {\n    var _variables$;\n\n    variables.forEach(function (value) {\n      value.value = collapse.getAttribute(VAR_NAMES[value.id]);\n    });\n    variables[0].disabled = false;\n    (_variables$ = variables[1]).disabled && (_variables$.disabled = variables[0].value.length == 0);\n  }\n}\n\nfunction dropVariables() {\n  variables.forEach(function (value) {\n    value.value = "";\n    value.disabled = true;\n  });\n}\n;// CONCATENATED MODULE: ./scripts/terminal.ts\nfunction terminal_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = terminal_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction terminal_toConsumableArray(arr) { return terminal_arrayWithoutHoles(arr) || terminal_iterableToArray(arr) || terminal_unsupportedIterableToArray(arr) || terminal_nonIterableSpread(); }\n\nfunction terminal_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction terminal_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return terminal_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return terminal_arrayLikeToArray(o, minLen); }\n\nfunction terminal_iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction terminal_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return terminal_arrayLikeToArray(arr); }\n\nfunction terminal_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n/**\n * Div representing a "terminal window", with following structure:<br/>\n * terminal<br/>\n *  |- .line (represents a terminal line, in \'STYLE\' mode only one at a time can be selected)<br/>\n *  |   |- .line-number (represents a line number, in \'STYLE\' mode makes parent line chosen)<br/>\n *  |   |- .line-content (terminal text, contains styled spans)<br/>\n *  | ...<br/>\n *  |- .line<br/>\n *      |- #line-adder.line-number (adds and chooses a new line in \'STYLE\' mode only)\n * @see choose_line choose line\n */\n\nvar terminal_terminal = document.getElementById(\'terminal\');\n/**\n * Terminal onkeydown handler (works in \'STYLE\' mode only).\n * Has following functionality:\n * * On \'Enter\' creates and chooses a new line below current.\n * * On \'Backspace\' deletes a letter, keeping formatting ability.\n * * On \'ArrowUp\' and \'ArrowDown\' chooses upper or lower line respectively, keeping caret position if possible.\n * - NB! Stepping through span requires additional arrow key pressing:\n *     <span>sample</span><span>text</span>: 11 arrows to walk through.\n * @see choose_line choose line\n */\n\nterminal_terminal.onkeydown = function (event) {\n  var selection = document.getSelection();\n  if (selection.rangeCount == 0) return;\n\n  if (event.key === \'Enter\') {\n    event.preventDefault();\n    choose_line(create_line(get_chosen_line()));\n  } else if (event.key == \'Backspace\') {\n    if (selection.isCollapsed) {\n      var range = selection.getRangeAt(0);\n      var chosen_children = get_chosen_line_content().children;\n\n      if (range.startContainer.textContent == \'\' && chosen_children.length == 1) {\n        if (chosen_children[0].classList.length != 0) {\n          chosen_children[0].className = \'\';\n          reflect_selection(selection.getRangeAt(0));\n        }\n\n        event.preventDefault();\n      }\n    } else event.preventDefault();\n  } else if (event.key == \'ArrowUp\' || event.key == \'ArrowDown\') {\n    var chosen = get_chosen_line();\n    var target = event.key == \'ArrowUp\' ? chosen.previousElementSibling : chosen.nextElementSibling;\n    choose_line(target, selection._getFocusOffsetInNode(chosen) - 1);\n    event.preventDefault();\n  }\n};\n/**\n * Terminal onclick handler (works in \'STYLE\' mode only).\n * Has following functionality:\n * * Restores saved selection (if any).\n * * If \'line-adder\' clicked, adds and chooses line.\n * * If \'line-number\' clicked, chooses line.\n * @see choose_line choose line\n */\n\n\nterminal_terminal.onclick = function (event) {\n  if (!!saved_focus) {\n    var selection = document.getSelection();\n    set_focus(selection);\n  }\n\n  var target = event.target;\n  if (target.id === \'line-adder\') choose_line(create_line(null, target.parentElement));else if (target.classList.contains(\'line-number\')) choose_line(target.parentElement);\n}; // Saving range section.\n\n/**\n * Saved range, represents the last selection made in terminal even after focus moved to another element.\n * Used with styling methods, especially if styling controls (e.g. input text - variable name) gets focused.\n */\n\n\nvar saved_focus = null;\n/**\n * Function returning last saved range (in most cases the same as current).\n */\n\nfunction get_focus() {\n  return saved_focus;\n}\n/**\n * Function setting given selection (current selection in most cases) to saved range if it is not a terminal selection.\n * Beforehand it checks if given selection already is in terminal and if saved range is a valid terminal selection.\n * @see range_in_place terminal selection\n * @param selection - given selection\n */\n\nfunction set_focus(selection) {\n  if (!selection_in_place(selection) && range_in_place(saved_focus)) {\n    selection.removeAllRanges();\n    selection.addRange(saved_focus);\n  }\n}\n/**\n * Function to visually reflect styled spans in given range.\n * Each span receives a css white smooth shadow \'selection styling\'.\n * It also saves given range to saved range.\n * @see terminal styled spans\n * @param range - given range\n */\n\n\nfunction reflect_nodes(range) {\n  clear_selected();\n  get_selected_nodes_in_range(range).forEach(function (value) {\n    value.classList.add(\'selected\');\n  });\n  saved_focus = range;\n}\n/**\n * Function to remove selection styling from every node in chosen line.\n * @see reflect_nodes selection styling\n * @see choose_line chosen line\n */\n\nfunction clear_selected() {\n  saved_focus = null;\n  var chosen = get_chosen_line_content();\n  if (!!chosen) terminal_toConsumableArray(chosen.children).forEach(function (value) {\n    value.classList.remove(\'selected\');\n  });\n} // Terminal mode section.\n\n/**\n * Strict enum of terminal states. There are generally four terminal states:\n * * \'FILE\' - terminal disabled, none of the contents clickable or selectable, view-only mode.\n * * \'STYLE\' - main and default state, only one line at a time active and selectable, line numbers / adder active, styled spans.\n * * \'PREVIEW\' - on each line instead of styled spans ASCII escape sequences presented, many lines selectable, line numbers / adder inactive.\n * * \'CODE\' - formatting compiled to code in selected language with different lines number, many lines selectable, line numbers / adder inactive.\n * @see terminal styled spans\n */\n\n\nvar TERMINAL_STATE = {\n  get FILE() {\n    return "FILE";\n  },\n\n  get STYLE() {\n    return "STYLE";\n  },\n\n  get PREVIEW() {\n    return "PREVIEW";\n  },\n\n  get CODE() {\n    return "CODE";\n  }\n\n};\n/**\n * Current terminal mode.\n */\n\nvar mode = TERMINAL_STATE.STYLE;\n/**\n * Array containing lines of styled spans for converting to Entries and saving while current terminal mode is \'CODE\'.\n * @see Entry Entries\n * @see terminal styled spans\n */\n\nvar editableHTML;\n/**\n * A special line number with \'+\' sign adding a new line and choosing it.\n * @see choose_line choose line\n */\n\nvar line_adder = document.getElementById(\'line-adder\');\n/**\n * Function switching terminal to a new mode, performs exit from old one and enter to new one.\n * @see exitMode exit mode\n * @see enterMode enter mode\n *\n * @param new_mode - new terminal mode\n */\n\nfunction switch_mode(new_mode) {\n  exitMode(mode);\n  enterMode(new_mode);\n  mode = new_mode;\n}\n/**\n * Function to exit terminal mode, performing following:\n * * \'STYLE\': clears selection styling and resets term changers, also saves actual line-contents to editableHTML.\n * * \'CODE\': adjusts line number to number of formatted lines in editableHTML.\n * * default: makes line-contents unselectable, line-adder invisible and sets line-numbers to default cursor.\n * @see reflect_nodes selection styling\n * @see drop_term_changers reset term changers\n * @see adjust_lines\n * @see editableHTML\n * @param old_mode - old terminal state\n */\n\nfunction exitMode(old_mode) {\n  disable_and_clear();\n\n  var line_contents = terminal_toConsumableArray(document.getElementsByClassName(\'line-content\'));\n\n  var line_numbers = terminal_toConsumableArray(document.getElementsByClassName(\'line-number\'));\n\n  switch (old_mode) {\n    case TERMINAL_STATE.STYLE:\n      clear_selected();\n      drop_term_changers();\n      editableHTML = [];\n\n      var _iterator = terminal_createForOfIteratorHelper(line_contents),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var content = _step.value;\n          editableHTML.push(content.innerHTML);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      break;\n\n    case TERMINAL_STATE.CODE:\n      adjust_lines(editableHTML.length);\n      line_contents = terminal_toConsumableArray(document.getElementsByClassName(\'line-content\'));\n      line_numbers = terminal_toConsumableArray(document.getElementsByClassName(\'line-number\'));\n      break;\n  }\n\n  var _iterator2 = terminal_createForOfIteratorHelper(line_contents),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _content = _step2.value;\n      _content.style.userSelect = \'auto\';\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = terminal_createForOfIteratorHelper(line_numbers),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var number = _step3.value;\n      number.style.cursor = \'default\';\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  line_adder.parentElement.style.display = \'none\';\n}\n/**\n * Function to enter terminal mode, performing following:\n * * \'FILE\': makes line-contents unselectable and restores line-contents from editableHTML.\n * * \'STYLE\': makes line-contents unselectable, line-adder visible sets line-numbers to pointer cursor,\n * restores line-contents from editableHTML and chooses first line.\n * * \'PREVIEW\': sets line contents to converted lines from editableHTML.\n * * \'CODE\': constructs new line set from editableHTML, adjusts line number to line set number\n * and fills line-contents from line set\n * @see editableHTML\n * @see choose_line choose line\n * @see Entry Entries\n * @see htmlToEntries convert styled spans to Entries\n * @see convert convert Entries to ASCII escape sequences\n * @see construct convert Entries to code\n * @see adjust_lines\n * @see terminal styled spans\n * @param new_mode - new terminal mode\n */\n\n\nfunction enterMode(new_mode) {\n  var html_copy = terminal_toConsumableArray(editableHTML);\n\n  var line_contents = terminal_toConsumableArray(document.getElementsByClassName(\'line-content\'));\n\n  var line_numbers = terminal_toConsumableArray(document.getElementsByClassName(\'line-number\'));\n\n  switch (new_mode) {\n    case TERMINAL_STATE.FILE:\n      var _iterator4 = terminal_createForOfIteratorHelper(line_contents),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var content = _step4.value;\n          content.style.userSelect = \'none\';\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = terminal_createForOfIteratorHelper(line_contents),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _content2 = _step5.value;\n          _content2.innerHTML = html_copy.shift();\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      break;\n\n    case TERMINAL_STATE.STYLE:\n      var _iterator6 = terminal_createForOfIteratorHelper(line_contents),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _content3 = _step6.value;\n          _content3.style.userSelect = \'none\';\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = terminal_createForOfIteratorHelper(line_numbers),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var number = _step7.value;\n          number.style.cursor = \'pointer\';\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      line_adder.parentElement.style.display = \'flex\';\n\n      var _iterator8 = terminal_createForOfIteratorHelper(line_contents),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _content4 = _step8.value;\n          _content4.innerHTML = editableHTML.shift();\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      choose_line(terminal_terminal.firstElementChild);\n      break;\n\n    case TERMINAL_STATE.PREVIEW:\n      var _iterator9 = terminal_createForOfIteratorHelper(line_contents),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _content5 = _step9.value;\n          _content5.innerHTML = convert(htmlToEntries(html_copy.shift()));\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      break;\n\n    case TERMINAL_STATE.CODE:\n      var codes = langs_construct("TypeScript (Node.js)", html_copy.map(function (value) {\n        return htmlToEntries(value);\n      })).split("\\n");\n      adjust_lines(codes.length);\n      line_contents = terminal_toConsumableArray(document.getElementsByClassName(\'line-content\'));\n      line_numbers = terminal_toConsumableArray(document.getElementsByClassName(\'line-number\'));\n\n      var _iterator10 = terminal_createForOfIteratorHelper(line_contents),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var _content6 = _step10.value;\n          _content6.style.userSelect = \'auto\';\n          _content6.innerHTML = codes.shift();\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      break;\n  }\n} // Lines management & style section.\n\n/**\n * Function to reset terminal state in \'STYLE\' mode.\n * It makes line-contents not editable, clears all selection styling and removes chosen line.\n * @see reflect_nodes selection styling\n * @see choose_line chosen line\n */\n\n\nfunction disable_and_clear() {\n  var content = get_chosen_line_content();\n\n  if (!!content) {\n    content.setAttribute(\'contenteditable\', \'false\');\n\n    var _iterator11 = terminal_createForOfIteratorHelper(content.children),\n        _step11;\n\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var span = _step11.value;\n        span.setAttribute(\'contenteditable\', \'false\');\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n  }\n\n  clear_selected();\n  var line_numbers = document.getElementsByClassName(\'line-number\');\n\n  var _iterator12 = terminal_createForOfIteratorHelper(line_numbers),\n      _step12;\n\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var number = _step12.value;\n      number.classList.remove(\'chosen\');\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n}\n/**\n * Function to choose line, \'chosen line\' is the only editable line in \'STYLE\' mode. It has special \'chosen\' CSS class.\n * It also sets caret to this line with collapsed selection.\n * @param line - the line to become chosen.\n * @param pos - position of caret in chosen line (if it is greater than line length, will be set to line end).\n */\n\n\nfunction choose_line(line, pos) {\n  if (!line || !line.classList.contains(\'line\') || line.children.length != 2) return;\n  var line_number = line.firstElementChild;\n  var line_content = line.lastElementChild;\n  disable_and_clear();\n  line_content.setAttribute(\'contenteditable\', \'true\');\n\n  var _iterator13 = terminal_createForOfIteratorHelper(line_content.children),\n      _step13;\n\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var child = _step13.value;\n      child.setAttribute(\'contenteditable\', \'true\');\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n\n  line_number.classList.add(\'chosen\');\n  var range = document.createRange();\n\n  range._setRangeInNode(line_content, pos);\n\n  var sel = document.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n/**\n * Function to create a new line at specified position.\n * The line contains line-adder with corresponding number and line-content with one empty span.\n * WARNING: only one parameter should be passed!\n * @param after - line after that the new line will be inserted.\n * @param before - line before that the new line will be inserted.\n * @return the new line.\n */\n\nfunction create_line() {\n  var after = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var line = document.createElement(\'div\');\n  line.classList.add(\'line\');\n  var line_number = document.createElement(\'div\');\n  line_number.classList.add(\'line-number\');\n  line_number.innerHTML = String(document.getElementsByClassName(\'line\').length);\n  var line_content = document.createElement(\'div\');\n  line_content.classList.add(\'line-content\');\n  var first_span = document.createElement(\'span\');\n  first_span.appendChild(document.createTextNode(""));\n  line_content.appendChild(first_span);\n  line.append(line_number, line_content);\n  if (!!after) after.after(line);\n  if (!!before) before.before(line);\n  return line;\n}\n/**\n * Function setting line number to given number.\n * It removes lines if current number is greater than given and adds if current number is less than given.\n * @param num - new lines number.\n */\n\n\nfunction adjust_lines(num) {\n  var lines = terminal_toConsumableArray(document.getElementsByClassName(\'line\')).filter(function (value) {\n    return value.children.length > 1;\n  });\n\n  if (lines.length == num) return;\n  var diff = Math.abs(lines.length - num);\n  var last_line = lines[lines.length - 1];\n  if (lines.length > num) for (var i = 0; i < diff; i++) {\n    lines[lines.length - 1 - i].remove();\n  } else for (var _i = 0; _i < diff; _i++) {\n    last_line = create_line(last_line);\n  }\n} // Getting text section.\n\n/**\n * Function to get text in given range. It extracts text from line-contents only.\n * @param range - range to extract text from.\n */\n\n\nfunction getClearText(range) {\n  return terminal_toConsumableArray(terminal_terminal.childNodes).reduce(function (previous, line) {\n    var content = line.lastElementChild;\n\n    if (range.intersectsNode(content)) {\n      var _range$_getRangeStart, _range$_getRangeStart2, _range$_getRangeEndIn, _range$_getRangeEndIn2;\n\n      var text = content.textContent;\n      var start = (_range$_getRangeStart = (_range$_getRangeStart2 = range._getRangeStartInNode(content)) === null || _range$_getRangeStart2 === void 0 ? void 0 : _range$_getRangeStart2.offset) !== null && _range$_getRangeStart !== void 0 ? _range$_getRangeStart : 0;\n      var end = (_range$_getRangeEndIn = (_range$_getRangeEndIn2 = range._getRangeEndInNode(content)) === null || _range$_getRangeEndIn2 === void 0 ? void 0 : _range$_getRangeEndIn2.offset) !== null && _range$_getRangeEndIn !== void 0 ? _range$_getRangeEndIn : text.length;\n      return previous + text.substring(start, end) + \'\\n\';\n    } else return previous;\n  }, "");\n} // Special nodes section.\n\n/**\n * Function to get chosen line or null.\n * @see choose_line chosen line\n */\n\nfunction get_chosen_line() {\n  var chosen = document.getElementsByClassName(\'chosen\')[0];\n  if (!!chosen) return chosen.parentElement;else return null;\n}\n/**\n * Function to get chosen line-content or null.\n * @see choose_line chosen line\n */\n\n\nfunction get_chosen_line_content() {\n  var line = get_chosen_line();\n  if (!!line) return get_chosen_line().lastElementChild;else return null;\n}\n/**\n * Function checking if given range is a \'terminal selection\' - a valid selection af some part of single\n * line-content, to witch any formatting may be applied.\n * @param range - range to check.\n */\n\nfunction range_in_place(range) {\n  var selectionParent = range.commonAncestorContainer;\n  var chosen = get_chosen_line_content();\n  if (!chosen) return false;else return get_chosen_line_content().contains(selectionParent);\n}\n/**\n * Function to check if given selection is a \'terminal selection\'.\n * @see range_in_place terminal selection\n * @param selection - selection to check.\n */\n\nfunction selection_in_place(selection) {\n  if (selection.rangeCount == 0) return false;\n  return range_in_place(selection.getRangeAt(0));\n}\n/**\n * Function to find the (parent) span corresponding to any selected node in terminal.\n * @throws DOMException if no span can be found for given element.\n * @param node - given node.\n */\n\nfunction find_span_for_place(node) {\n  if (node.nodeType == Node.TEXT_NODE || node.nodeName == "BR") return node.parentElement;\n  if (node.nodeName != \'SPAN\') throw new DOMException("Selected wrong element: " + node.nodeName);\n  return node;\n} // Export section.\n\n/**\n * Function converting inner HTML string to array of Entries, that can be converted to ASCII escape sequences or code.\n * Inner HTML string should contain styled spans.\n * @see Entry Entries\n * @see terminal styled spans\n * @param inner - inner HTML string to convert.\n */\n\nfunction htmlToEntries(inner) {\n  var div = document.createElement(\'div\');\n  div.innerHTML = inner;\n  return terminal_toConsumableArray(div.children).map(function (value) {\n    return {\n      classes: terminal_toConsumableArray(value.classList),\n      value: value.textContent,\n      var_name: value.getAttribute(VAR_NAMES["var-name"]),\n      var_type: value.getAttribute(VAR_NAMES["var-type"])\n    };\n  });\n}\n;// CONCATENATED MODULE: ./scripts/tabs.ts\nfunction tabs_createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = tabs_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\n\nfunction tabs_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return tabs_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return tabs_arrayLikeToArray(o, minLen); }\n\nfunction tabs_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//FIXME\n\nvar active_tab;\nfunction open_tab(tab_link, tab_content) {\n  var tab_contents = document.getElementsByClassName(\'tab-content\');\n\n  var _iterator = tabs_createForOfIteratorHelper(tab_contents),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var content = _step.value;\n      content.style.display = \'none\';\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var tab_links = document.getElementsByClassName(\'tab-link\');\n\n  var _iterator2 = tabs_createForOfIteratorHelper(tab_links),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _link = _step2.value;\n\n      _link.classList.remove(\'active\');\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  document.getElementById(tab_content).style.display = \'flex\';\n  var link = document.getElementById(tab_link);\n  link.classList.add(\'active\');\n  active_tab = tab_content;\n  switch_mode(TERMINAL_STATE[link.getAttribute(\'name\')]);\n}\n\ndocument.getElementById(\'tab-links\').onclick = function (event) {\n  var target = event.target;\n\n  if (target.classList.contains(\'tab-link\')) {\n    var tab_contents = document.getElementById(\'tab-contents\');\n    var header = document.getElementById(\'header\');\n    open_tab(target.id, target.id.replace(\'tab\', \'content\'));\n\n    if (target.classList.contains(\'collapsing\')) {\n      tab_contents.style.display = \'none\';\n      header.style.height = \'auto\';\n    } else {\n      //TODO: revise later alongside with layouting\n      tab_contents.style.display = \'\';\n      header.style.height = \'\';\n    }\n  }\n};\n;// CONCATENATED MODULE: ./scripts/main.ts\n\n\n\n\n\n\nwindow.onload = function () {\n  open_tab(\'style-tab\', \'style-content\');\n  choose_line(terminal_terminal.firstElementChild);\n  restorePresets();\n  check();\n};\n\ndocument.ondragstart = function (event) {\n  event.preventDefault();\n  return false;\n};\n\ndocument.ondrop = function (event) {\n  event.preventDefault();\n  return false;\n};\n\ndocument.onselectionchange = function () {\n  var selection = document.getSelection();\n  if (mode != TERMINAL_STATE.STYLE || !selection_in_place(selection)) return;\n  var range = selection.getRangeAt(0);\n  reflect_nodes(range);\n  reflect_selection(range);\n  reflectVariable(range);\n};\n\ndocument.oncopy = function (event) {\n  var selection = document.getSelection();\n\n  if (!!selection) {\n    var str = getClearText(selection.getRangeAt(0));\n    var refined = str.replace(/\\u00a0/g, " ");\n    event.clipboardData.setData(\'text/plain\', refined);\n    event.preventDefault();\n  }\n};\n\ndocument.onpaste = function (event) {\n  var selection = document.getSelection();\n\n  if (!!selection && selection.isCollapsed) {\n    var str = event.clipboardData.getData(\'text/plain\');\n    var refined = str.replace(/\\r?\\n|\\r/g, "");\n    var range = selection.getRangeAt(0);\n    var text = range.commonAncestorContainer;\n\n    var offset = range._getRangeStartInNode(text).offset;\n\n    text.textContent = text.textContent.slice(0, offset) + refined + text.textContent.slice(offset);\n  }\n\n  event.preventDefault();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///223\n')},558:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "html,\\nbody,\\n#base {\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n}\\n.holder {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n}\\n.ins {\\n  cursor: default;\\n  user-select: none;\\n}\\n#base {\\n  overflow: hidden;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#header {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: column;\\n  height: 25%;\\n  background-color: #f1f1f1;\\n}\\n#footer {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  height: 5%;\\n}\\n.for-black {\\n  color: black;\\n}\\n.back-black {\\n  background: black;\\n}\\n.for-red {\\n  color: red;\\n}\\n.back-red {\\n  background: red;\\n}\\n.for-green {\\n  color: green;\\n}\\n.back-green {\\n  background: green;\\n}\\n.for-yellow {\\n  color: yellow;\\n}\\n.back-yellow {\\n  background: yellow;\\n}\\n.for-blue {\\n  color: blue;\\n}\\n.back-blue {\\n  background: blue;\\n}\\n.for-magenta {\\n  color: magenta;\\n}\\n.back-magenta {\\n  background: magenta;\\n}\\n.for-cyan {\\n  color: cyan;\\n}\\n.back-cyan {\\n  background: cyan;\\n}\\n.for-white {\\n  color: white;\\n}\\n.back-white {\\n  background: white;\\n}\\n.sty-bold {\\n  font-weight: 700;\\n}\\n.sty-normal {\\n  font-weight: 400;\\n}\\n.sty-dim {\\n  font-weight: 100;\\n}\\n@keyframes blink {\\n  50% {\\n    color: transparent;\\n  }\\n}\\n.blink {\\n  animation: blink 1s step-end 0s infinite;\\n}\\n.cross {\\n  text-decoration: line-through;\\n}\\n.under {\\n  border-bottom: 2px solid currentColor;\\n}\\n.ita {\\n  font-style: italic;\\n}\\n", "",{"version":3,"sources":["webpack://./styles/main.less","webpack://./styles/formatting.less"],"names":[],"mappings":"AAMA;;;EACI,WAAA;EACA,YAAA;EACA,SAAA;ACHJ;ADMA;EACI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ACJJ;ADSA;EACI,eAAA;EACA,iBAAA;ACPJ;ADYA;EACI,gBAAA;EACA,aAAA;EACA,sBAAA;ACVJ;ADaA;EArBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EAoBA,sBAAA;EACA,WAAA;EACA,yBAAA;ACRJ;ADWA;EA5BI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EA2BA,UAAA;ACNJ;ADrCC;ECKG,YAAA;AAmCJ;ADxCC;ECQG,iBAAA;AAmCJ;AD3CC;ECKG,UAAA;AAyCJ;AD9CC;ECQG,eAAA;AAyCJ;ADjDC;ECKG,YAAA;AA+CJ;ADpDC;ECQG,iBAAA;AA+CJ;ADvDC;ECKG,aAAA;AAqDJ;AD1DC;ECQG,kBAAA;AAqDJ;AD7DC;ECKG,WAAA;AA2DJ;ADhEC;ECQG,gBAAA;AA2DJ;ADnEC;ECKG,cAAA;AAiEJ;ADtEC;ECQG,mBAAA;AAiEJ;ADzEC;ECKG,WAAA;AAuEJ;AD5EC;ECQG,gBAAA;AAuEJ;AD/EC;ECKG,YAAA;AA6EJ;ADlFC;ECQG,iBAAA;AA6EJ;ADrFC;ECeG,gBAAA;AAyEJ;ADxFC;ECeG,gBAAA;AA4EJ;AD3FC;ECeG,gBAAA;AA+EJ;AA3EA;EACE;IAAM,kBAAA;EA8EN;AACF;AA7EA;EACE,wCAAA;AA+EF;AA5EA;EACE,6BAAA;AA8EF;AA3EA;EACE,qCAAA;AA6EF;AA1EA;EACE,kBAAA;AA4EF","sourcesContent":["@bold: 700;\\n@normal: 400;\\n@dim: 100;\\n\\n\\n\\nhtml, body, #base {\\n    width: 100%;\\n    height: 100%;\\n    margin: 0;\\n}\\n\\n.holder {\\n    width: 100%;\\n    margin: 0;\\n    display: flex;\\n    box-sizing: border-box;\\n}\\n\\n\\n\\n.ins {\\n    cursor: default;\\n    user-select: none;\\n}\\n\\n\\n\\n#base {\\n    overflow: hidden;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n#header {\\n    .holder();\\n    flex-direction: column;\\n    height: 25%;\\n    background-color: #f1f1f1;\\n}\\n\\n#footer {\\n    .holder();\\n    height: 5%;\\n}\\n","@import \\"main.less\\";\\n\\n//@colors: black, red, green, yellow, blue, magenta, cyan, white;\\neach(@colors, {\\n  .for-@{value} {\\n    color: @value;\\n  }\\n  .back-@{value} {\\n    background: @value;\\n  }\\n});\\n\\n//@styles: bold - 700, normal - 400, dim  - 100;\\neach(@styles, {\\n  .sty-@{value} {\\n    font-weight: @@value;\\n  }\\n});\\n\\n@keyframes blink {\\n  50% { color: transparent; }\\n}\\n.blink {\\n  animation: blink 1s step-end 0s infinite;\\n}\\n\\n.cross {\\n  text-decoration: line-through;\\n}\\n\\n.under {\\n  border-bottom: 2px solid currentColor;\\n}\\n\\n.ita {\\n  font-style: italic;\\n}\\n\\n// обрамленный, окруженный, надчеркнутый\\n\\n@colors: black,red,green,yellow,blue,magenta,cyan,white;@styles: bold,normal,dim;@def-for: white;@def-back: black;@def-sty: normal;"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///558\n')},6:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "html,\\nbody,\\n#base {\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n}\\n.holder {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n}\\n.ins {\\n  cursor: default;\\n  user-select: none;\\n}\\n#base {\\n  overflow: hidden;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#header {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: column;\\n  height: 25%;\\n  background-color: #f1f1f1;\\n}\\n#footer {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  height: 5%;\\n}\\n", "",{"version":3,"sources":["webpack://./styles/main.less"],"names":[],"mappings":"AAMA;;;EACI,WAAA;EACA,YAAA;EACA,SAAA;AAHJ;AAMA;EACI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;AAJJ;AASA;EACI,eAAA;EACA,iBAAA;AAPJ;AAYA;EACI,gBAAA;EACA,aAAA;EACA,sBAAA;AAVJ;AAaA;EArBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EAoBA,sBAAA;EACA,WAAA;EACA,yBAAA;AARJ;AAWA;EA5BI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EA2BA,UAAA;AANJ","sourcesContent":["@bold: 700;\\n@normal: 400;\\n@dim: 100;\\n\\n\\n\\nhtml, body, #base {\\n    width: 100%;\\n    height: 100%;\\n    margin: 0;\\n}\\n\\n.holder {\\n    width: 100%;\\n    margin: 0;\\n    display: flex;\\n    box-sizing: border-box;\\n}\\n\\n\\n\\n.ins {\\n    cursor: default;\\n    user-select: none;\\n}\\n\\n\\n\\n#base {\\n    overflow: hidden;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n#header {\\n    .holder();\\n    flex-direction: column;\\n    height: 25%;\\n    background-color: #f1f1f1;\\n}\\n\\n#footer {\\n    .holder();\\n    height: 5%;\\n}\\n\\n@colors: black,red,green,yellow,blue,magenta,cyan,white;@styles: bold,normal,dim;@def-for: white;@def-back: black;@def-sty: normal;"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtbG9nZ2VyLy4vc3R5bGVzL21haW4ubGVzcz85NjQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNzSDtBQUM3QjtBQUN6Riw4QkFBOEIsbUZBQTJCLENBQUMsd0dBQXFDO0FBQy9GO0FBQ0EsK0RBQStELGdCQUFnQixpQkFBaUIsY0FBYyxHQUFHLFdBQVcsZ0JBQWdCLGNBQWMsa0JBQWtCLDJCQUEyQixHQUFHLFFBQVEsb0JBQW9CLHNCQUFzQixHQUFHLFNBQVMscUJBQXFCLGtCQUFrQiwyQkFBMkIsR0FBRyxXQUFXLGdCQUFnQixjQUFjLGtCQUFrQiwyQkFBMkIsMkJBQTJCLGdCQUFnQiw4QkFBOEIsR0FBRyxXQUFXLGdCQUFnQixjQUFjLGtCQUFrQiwyQkFBMkIsZUFBZSxHQUFHLFNBQVMscUZBQXFGLFVBQVUsVUFBVSxVQUFVLEtBQUssS0FBSyxVQUFVLFVBQVUsVUFBVSxXQUFXLEtBQUssS0FBSyxVQUFVLFdBQVcsS0FBSyxLQUFLLFdBQVcsVUFBVSxXQUFXLEtBQUssS0FBSyxXQUFXLFVBQVUsVUFBVSxXQUFXLFlBQVksVUFBVSxXQUFXLEtBQUssS0FBSyxXQUFXLFVBQVUsVUFBVSxXQUFXLFdBQVcsb0NBQW9DLGVBQWUsWUFBWSwyQkFBMkIsa0JBQWtCLG1CQUFtQixnQkFBZ0IsR0FBRyxhQUFhLGtCQUFrQixnQkFBZ0Isb0JBQW9CLDZCQUE2QixHQUFHLGNBQWMsc0JBQXNCLHdCQUF3QixHQUFHLGVBQWUsdUJBQXVCLG9CQUFvQiw2QkFBNkIsR0FBRyxhQUFhLGdCQUFnQiw2QkFBNkIsa0JBQWtCLGdDQUFnQyxHQUFHLGFBQWEsZ0JBQWdCLGlCQUFpQixHQUFHLDREQUE0RCx5QkFBeUIsZ0JBQWdCLGlCQUFpQixpQkFBaUIsbUJBQW1CO0FBQzNxRDtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSxcXG4jYmFzZSB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIG1hcmdpbjogMDtcXG59XFxuLmhvbGRlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1hcmdpbjogMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG4uaW5zIHtcXG4gIGN1cnNvcjogZGVmYXVsdDtcXG4gIHVzZXItc2VsZWN0OiBub25lO1xcbn1cXG4jYmFzZSB7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcbiNoZWFkZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW46IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBoZWlnaHQ6IDI1JTtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmMWYxZjE7XFxufVxcbiNmb290ZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBtYXJnaW46IDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGhlaWdodDogNSU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3N0eWxlcy9tYWluLmxlc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBTUE7OztFQUNJLFdBQUE7RUFDQSxZQUFBO0VBQ0EsU0FBQTtBQUhKO0FBTUE7RUFDSSxXQUFBO0VBQ0EsU0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtBQUpKO0FBU0E7RUFDSSxlQUFBO0VBQ0EsaUJBQUE7QUFQSjtBQVlBO0VBQ0ksZ0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7QUFWSjtBQWFBO0VBckJJLFdBQUE7RUFDQSxTQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBb0JBLHNCQUFBO0VBQ0EsV0FBQTtFQUNBLHlCQUFBO0FBUko7QUFXQTtFQTVCSSxXQUFBO0VBQ0EsU0FBQTtFQUNBLGFBQUE7RUFDQSxzQkFBQTtFQTJCQSxVQUFBO0FBTkpcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGJvbGQ6IDcwMDtcXG5Abm9ybWFsOiA0MDA7XFxuQGRpbTogMTAwO1xcblxcblxcblxcbmh0bWwsIGJvZHksICNiYXNlIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgbWFyZ2luOiAwO1xcbn1cXG5cXG4uaG9sZGVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuXFxuXFxuLmlucyB7XFxuICAgIGN1cnNvcjogZGVmYXVsdDtcXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XFxufVxcblxcblxcblxcbiNiYXNlIHtcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuI2hlYWRlciB7XFxuICAgIC5ob2xkZXIoKTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgaGVpZ2h0OiAyNSU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMWYxZjE7XFxufVxcblxcbiNmb290ZXIge1xcbiAgICAuaG9sZGVyKCk7XFxuICAgIGhlaWdodDogNSU7XFxufVxcblxcbkBjb2xvcnM6IGJsYWNrLHJlZCxncmVlbix5ZWxsb3csYmx1ZSxtYWdlbnRhLGN5YW4sd2hpdGU7QHN0eWxlczogYm9sZCxub3JtYWwsZGltO0BkZWYtZm9yOiB3aGl0ZTtAZGVmLWJhY2s6IGJsYWNrO0BkZWYtc3R5OiBub3JtYWw7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n')},44:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "html,\\nbody,\\n#base {\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n}\\n.holder {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n}\\n.ins {\\n  cursor: default;\\n  user-select: none;\\n}\\n#base {\\n  overflow: hidden;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#header {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: column;\\n  height: 25%;\\n  background-color: #f1f1f1;\\n}\\n#footer {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  height: 5%;\\n}\\n#tab-links {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  min-height: 30%;\\n  border-bottom: 1px solid #ccc;\\n}\\n.tab-link {\\n  background-color: inherit;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  padding: 14px 16px;\\n  transition: 0.3s;\\n  user-select: none;\\n}\\n.tab-link:hover {\\n  background-color: #ddd;\\n}\\n.tab-links:active {\\n  background-color: #ccc;\\n}\\n#tab-contents {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  max-height: 70%;\\n  height: 70%;\\n  padding: 0.5rem;\\n}\\n.tab-content {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  height: 100%;\\n  display: none;\\n}\\n#preview-content {\\n  height: 0;\\n}\\n.tile {\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n}\\n.tile + .tile {\\n  margin-left: 0.5rem;\\n}\\n.gr {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: row;\\n}\\n.gr-in {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: column;\\n}\\n.gr-in + .gr-in {\\n  margin-top: 0.5rem;\\n}\\n.tile-set-left {\\n  display: flex;\\n  height: 100%;\\n  width: 35%;\\n  justify-content: center;\\n  justify-content: flex-start;\\n}\\n.tile-set-center {\\n  display: flex;\\n  height: 100%;\\n  width: 35%;\\n  justify-content: center;\\n  width: 30%;\\n}\\n.tile-set-right {\\n  display: flex;\\n  height: 100%;\\n  width: 35%;\\n  justify-content: center;\\n  justify-content: flex-end;\\n}\\n.preset-holder {\\n  background-color: black;\\n  color: white;\\n  font-weight: 400;\\n}\\n.preset-example {\\n  cursor: pointer;\\n  user-select: none;\\n}\\ninput[type=\'radio\'] + label {\\n  position: relative;\\n}\\n", "",{"version":3,"sources":["webpack://./styles/main.less","webpack://./styles/tabs.less"],"names":[],"mappings":"AAMA;;;EACI,WAAA;EACA,YAAA;EACA,SAAA;ACHJ;ADMA;EACI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ACJJ;ADSA;EACI,eAAA;EACA,iBAAA;ACPJ;ADYA;EACI,gBAAA;EACA,aAAA;EACA,sBAAA;ACVJ;ADaA;EArBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EAoBA,sBAAA;EACA,WAAA;EACA,yBAAA;ACRJ;ADWA;EA5BI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EA2BA,UAAA;ACNJ;AAjCA;EDSI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECVF,eAAA;EACA,6BAAA;AAsCF;AAnCA;EACE,yBAAA;EACA,YAAA;EACA,aAAA;EACA,eAAA;EACA,kBAAA;EACA,gBAAA;EACA,iBAAA;AAqCF;AAlCA;EACE,sBAAA;AAoCF;AAjCA;EACE,sBAAA;AAmCF;AA9BA;EDjBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECgBF,eAAA;EACA,WAAA;EACA,eAAA;AAmCF;AAhCA;EDxBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECuBF,YAAA;EACA,aAAA;AAqCF;AAlCA;EACE,SAAA;AAoCF;AA/BA;EACE,aAAA;EACA,sBAAA;EACA,YAAA;AAiCF;AApCA;EAKI,mBAAA;AAkCJ;AA9BA;ED7CI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EC4CF,mBAAA;AAmCF;AAhCA;EDlDI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECiDF,sBAAA;AAqCF;AAvCA;EAII,kBAAA;AAsCJ;AAzBA;EANE,aAAA;EACA,YAAA;EACA,UAAA;EACA,uBAAA;EAKA,2BAAA;AA8BF;AA3BA;EAXE,aAAA;EACA,YAAA;EACA,UAAA;EACA,uBAAA;EAUA,UAAA;AAgCF;AA7BA;EAhBE,aAAA;EACA,YAAA;EACA,UAAA;EACA,uBAAA;EAeA,yBAAA;AAkCF;AA7BA;EACE,uBAAA;EACA,YAAA;EACA,gBAAA;AA+BF;AA5BA;EACE,eAAA;EACA,iBAAA;AA8BF;AAzBA;EACE,kBAAA;AA2BF","sourcesContent":["@bold: 700;\\n@normal: 400;\\n@dim: 100;\\n\\n\\n\\nhtml, body, #base {\\n    width: 100%;\\n    height: 100%;\\n    margin: 0;\\n}\\n\\n.holder {\\n    width: 100%;\\n    margin: 0;\\n    display: flex;\\n    box-sizing: border-box;\\n}\\n\\n\\n\\n.ins {\\n    cursor: default;\\n    user-select: none;\\n}\\n\\n\\n\\n#base {\\n    overflow: hidden;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n#header {\\n    .holder();\\n    flex-direction: column;\\n    height: 25%;\\n    background-color: #f1f1f1;\\n}\\n\\n#footer {\\n    .holder();\\n    height: 5%;\\n}\\n","@import \\"main.less\\";\\n\\n\\n\\n#tab-links {\\n  .holder();\\n  min-height: 30%;\\n  border-bottom: 1px solid #ccc;\\n}\\n\\n.tab-link {\\n  background-color: inherit;\\n  border: none;\\n  outline: none;\\n  cursor: pointer;\\n  padding: 14px 16px;\\n  transition: 0.3s;\\n  user-select: none;\\n}\\n\\n.tab-link:hover {\\n  background-color: #ddd;\\n}\\n\\n.tab-links:active {\\n  background-color: #ccc;\\n}\\n\\n\\n\\n#tab-contents {\\n  .holder();\\n  max-height: 70%;\\n  height: 70%;\\n  padding: .5rem;\\n}\\n\\n.tab-content {\\n  .holder();\\n  height: 100%;\\n  display: none;\\n}\\n\\n#preview-content {\\n  height: 0;\\n}\\n\\n\\n\\n.tile {\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  + .tile {\\n    margin-left: .5rem;\\n  }\\n}\\n\\n.gr {\\n  .holder();\\n  flex-direction: row;\\n}\\n\\n.gr-in {\\n  .holder();\\n  flex-direction: column;\\n  + .gr-in {\\n    margin-top: .5rem;\\n  }\\n}\\n\\n\\n\\n.tile-set() {\\n  display: flex;\\n  height: 100%;\\n  width: 35%;\\n  justify-content: center;\\n}\\n\\n.tile-set-left {\\n  .tile-set();\\n  justify-content: flex-start;\\n}\\n\\n.tile-set-center {\\n  .tile-set();\\n  width: 30%;\\n}\\n\\n.tile-set-right {\\n  .tile-set();\\n  justify-content: flex-end;\\n}\\n\\n\\n\\n.preset-holder {\\n  background-color: @def-back;\\n  color: @def-for;\\n  font-weight: @@def-sty;\\n}\\n\\n.preset-example {\\n  cursor: pointer;\\n  user-select: none;\\n}\\n\\n\\n\\ninput[type=\'radio\'] + label {\\n  position: relative;\\n}\\n\\n@colors: black,red,green,yellow,blue,magenta,cyan,white;@styles: bold,normal,dim;@def-for: white;@def-back: black;@def-sty: normal;"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///44\n')},432:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "html,\\nbody,\\n#base {\\n  width: 100%;\\n  height: 100%;\\n  margin: 0;\\n}\\n.holder {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n}\\n.ins {\\n  cursor: default;\\n  user-select: none;\\n}\\n#base {\\n  overflow: hidden;\\n  display: flex;\\n  flex-direction: column;\\n}\\n#header {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: column;\\n  height: 25%;\\n  background-color: #f1f1f1;\\n}\\n#footer {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  height: 5%;\\n}\\n#terminal {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  min-height: 70%;\\n  flex: 2;\\n  flex-direction: column;\\n  overflow: auto;\\n  font-family: \'Courier New\', monospace;\\n  font-size: small;\\n  background-color: black;\\n  color: white;\\n  font-weight: 400;\\n}\\n.line {\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  flex-direction: row;\\n  min-height: 1rem;\\n  width: 100%;\\n  margin: 0 0 0.5rem;\\n}\\n.line-number {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  width: 5%;\\n  cursor: pointer;\\n  user-select: none;\\n}\\n.line-content {\\n  width: 100%;\\n  margin: 0;\\n  display: flex;\\n  box-sizing: border-box;\\n  width: 95%;\\n  flex-grow: 1;\\n  overflow-wrap: break-word;\\n}\\nspan {\\n  white-space: nowrap;\\n}\\n.chosen {\\n  cursor: default;\\n}\\n:not(.chosen) + .line-content {\\n  user-select: none;\\n}\\n.selected {\\n  box-shadow: 0 0.5rem 0.25rem -0.25rem white;\\n}\\n[contenteditable] {\\n  outline: 0 solid transparent;\\n}\\n", "",{"version":3,"sources":["webpack://./styles/main.less","webpack://./styles/terminal.less"],"names":[],"mappings":"AAMA;;;EACI,WAAA;EACA,YAAA;EACA,SAAA;ACHJ;ADMA;EACI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ACJJ;ADSA;EACI,eAAA;EACA,iBAAA;ACPJ;ADYA;EACI,gBAAA;EACA,aAAA;EACA,sBAAA;ACVJ;ADaA;EArBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EAoBA,sBAAA;EACA,WAAA;EACA,yBAAA;ACRJ;ADWA;EA5BI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;EA2BA,UAAA;ACNJ;AAjCA;EDSI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECVF,eAAA;EACA,OAAA;EACA,sBAAA;EACA,cAAA;EAEA,qCAAA;EACA,gBAAA;EAEA,uBAAA;EACA,YAAA;EACA,gBAAA;AAoCF;AAjCA;EDLI,SAAA;EACA,aAAA;EACA,sBAAA;ECKF,mBAAA;EACA,gBAAA;EACA,WAAA;EACA,kBAAA;AAqCF;AAlCA;EDdI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECaF,SAAA;EACA,eAAA;EACA,iBAAA;AAuCF;AApCA;EDrBI,WAAA;EACA,SAAA;EACA,aAAA;EACA,sBAAA;ECoBF,UAAA;EACA,YAAA;EACA,yBAAA;AAyCF;AAtCA;EACE,mBAAA;AAwCF;AArCA;EACE,eAAA;AAuCF;AAlCA;EACE,iBAAA;AAoCF;AAhCA;EACE,2CAAA;AAkCF;AA7BA;EACE,4BAAA;AA+BF","sourcesContent":["@bold: 700;\\n@normal: 400;\\n@dim: 100;\\n\\n\\n\\nhtml, body, #base {\\n    width: 100%;\\n    height: 100%;\\n    margin: 0;\\n}\\n\\n.holder {\\n    width: 100%;\\n    margin: 0;\\n    display: flex;\\n    box-sizing: border-box;\\n}\\n\\n\\n\\n.ins {\\n    cursor: default;\\n    user-select: none;\\n}\\n\\n\\n\\n#base {\\n    overflow: hidden;\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n#header {\\n    .holder();\\n    flex-direction: column;\\n    height: 25%;\\n    background-color: #f1f1f1;\\n}\\n\\n#footer {\\n    .holder();\\n    height: 5%;\\n}\\n","@import \\"main.less\\";\\n\\n\\n\\n#terminal {\\n  .holder();\\n  min-height: 70%;\\n  flex: 2;\\n  flex-direction: column;\\n  overflow: auto;\\n\\n  font-family: \'Courier New\', monospace;\\n  font-size: small;\\n\\n  background-color: @def-back;\\n  color: @def-for;\\n  font-weight: @@def-sty;\\n}\\n\\n.line {\\n  .holder();\\n  flex-direction: row;\\n  min-height: 1rem;\\n  width: 100%;\\n  margin: 0 0 .5rem;\\n}\\n\\n.line-number {\\n  .holder();\\n  width: 5%;\\n  cursor: pointer;\\n  user-select: none;\\n}\\n\\n.line-content {\\n  .holder();\\n  width: 95%;\\n  flex-grow: 1;\\n  overflow-wrap: break-word;\\n}\\n\\nspan {\\n  white-space: nowrap;\\n}\\n\\n.chosen {\\n  cursor: default;\\n}\\n\\n\\n\\n:not(.chosen)+.line-content {\\n  user-select: none;\\n  // background: aqua;\\n}\\n\\n.selected {\\n  box-shadow: 0 .5rem .25rem -.25rem white;\\n}\\n\\n\\n\\n[contenteditable] {\\n  outline: 0 solid transparent;\\n}\\n\\n@colors: black,red,green,yellow,blue,magenta,cyan,white;@styles: bold,normal,dim;@def-for: white;@def-back: black;@def-sty: normal;"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///432\n')},645:module=>{"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join("");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === "string") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, ""]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtbG9nZ2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8yNGZiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0Q0FBNEMscUJBQXFCO0FBQ2pFOztBQUVBO0FBQ0EsS0FBSztBQUNMLElBQUk7QUFDSjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixxQkFBcUI7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiI2NDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///645\n')},15:module=>{"use strict";eval('\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = function cssWithMappingToString(item) {\n  var _item = _slicedToArray(item, 4),\n      content = _item[1],\n      cssMapping = _item[3];\n\n  if (typeof btoa === "function") {\n    // eslint-disable-next-line no-undef\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n    var sourceMapping = "/*# ".concat(data, " */");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join("\\n");\n  }\n\n  return [content].join("\\n");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jcmVhdGUtbG9nZ2VyLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanM/NzVlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixpQ0FBaUMsMkhBQTJIOztBQUU1Siw2QkFBNkIsa0tBQWtLOztBQUUvTCxpREFBaUQsZ0JBQWdCLGdFQUFnRSx3REFBd0QsNkRBQTZELHNEQUFzRCxrSEFBa0g7O0FBRTlaLHNDQUFzQyx1REFBdUQsdUNBQXVDLFNBQVMsT0FBTyxrQkFBa0IsRUFBRSxhQUFhOztBQUVyTCx3Q0FBd0MsZ0ZBQWdGLGVBQWUsZUFBZSxnQkFBZ0Isb0JBQW9CLE1BQU0sMENBQTBDLCtCQUErQixhQUFhLHFCQUFxQixtQ0FBbUMsRUFBRSxFQUFFLGNBQWMsV0FBVyxVQUFVLEVBQUUsVUFBVSxNQUFNLGlEQUFpRCxFQUFFLFVBQVUsa0JBQWtCLEVBQUUsRUFBRSxhQUFhOztBQUV2ZSwrQkFBK0Isb0NBQW9DOztBQUVuRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsY0FBYztBQUNyRTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n')},379:(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///379\n")}},__webpack_module_cache__={};function __webpack_require__(Q){var n=__webpack_module_cache__[Q];if(void 0!==n)return n.exports;var B=__webpack_module_cache__[Q]={id:Q,exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}__webpack_require__.n=Q=>{var n=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(Q,n)=>{for(var B in n)__webpack_require__.o(n,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:n[B]})},__webpack_require__.o=(Q,n)=>Object.prototype.hasOwnProperty.call(Q,n);var __webpack_exports__=__webpack_require__(223)})();